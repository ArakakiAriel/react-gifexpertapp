{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","helpers/getRandomGif.js","components/GifGrid.js","hooks/useFetchGifs.js","components/RandomButton.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","GifGridItem","id","title","url","src","alt","getGifs","category","a","console","log","apiUrl","encodeURI","fetch","resp","json","data","gifs","map","gif","images","downsized_medium","getRandomGif","randomGif","GifGrid","loading","state","setState","useEffect","setTimeout","then","imgs","img","useFetchGifs","toUpperCase","key","RandomButton","onClick","GifExpertApp","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cede82db.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => { //Importamos la funcion para modificar el array de categorias\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    //Funcion que modifica el estado \"inputValue\" a medida que se va escribiendo sobre el input\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value); //e.target.value => Valor del texto extraído del input\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault(); //Esto hace que no se refreshee la página cuando se realiza la acción\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(categories => [inputValue, ...categories]); //Importando \r\n            setInputValue(''); // Seteamos el valor del input devuelta en un string vacío\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className='form' onSubmit={handleSubmit}>\r\n            <input \r\n                type='text'\r\n                className='i-add-category'\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n                placeholder='Ingrese una categoría'\r\n                \r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n  };","import React from 'react'\r\n\r\n//Componente que genera el gif con su respectivo titulo\r\nexport const GifGridItem = ( {id,title,url} ) => {\r\n    return (\r\n        <div className='card'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async (category) => {\r\n  console.log(category)\r\n  const apiKey = \"wKeZ3oG4mz7cXDaH1EGAfcUtGygT5F68\";\r\n  let apiUrl = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=10`; //El encodeURI cambia los espacios por +\r\n\r\n  const resp = await fetch(apiUrl);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((gif) => {\r\n    return {\r\n      id: gif.id,\r\n      title: gif.title,\r\n      url: gif.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n","export const getRandomGif = async () => {\r\n    const apiKey = \"wKeZ3oG4mz7cXDaH1EGAfcUtGygT5F68\";\r\n    let apiUrl = `https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`; //El encodeURI cambia los espacios por +\r\n  \r\n    const resp = await fetch(apiUrl);\r\n    const { data } = await resp.json();\r\n    const randomGif = {\r\n        id: data.id,\r\n        title: data.title,\r\n        url: data.images?.downsized_medium.url,\r\n      };\r\n    return [randomGif];\r\n}\r\n  ","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    // useEffect( () => {\r\n    //       getGifs(category).then(setImages); //Utilizamos el then para que espere a la respuesta de la funcion y luego seteamos las imagenes\r\n    // }, [category]);\r\n\r\n    const {data:images, loading} = useFetchGifs(category); //data:images lo que hace es que obtiene data y le cambia el nombre a la variable por images\r\n    return (\r\n        <>\r\n            <h3><u>{category.toUpperCase()}</u></h3>\r\n            {loading && <p className='animate__animated animate__flash'>Loading...</p> }\r\n             <div className='card-grid'>\r\n                    {\r\n                        images.map((img) => (\r\n                            <GifGridItem \r\n                                key={img.id}\r\n                                { ...img }\r\n                            />\r\n                        ))\r\n                    }\r\n            </div> \r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\nimport {getRandomGif} from '../helpers/getRandomGif'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n    \r\n    useEffect( () => {\r\n        if(category !== 'RANDOM GIF'){\r\n            \r\n            setTimeout(() => {\r\n                getGifs(category).then(async (imgs) =>{                        \r\n                    setState({\r\n                        data:imgs,\r\n                        loading: false\r\n                    });\r\n                }); //Utilizamos el then para que espere a la respuesta de la funcion y luego seteamos las imagenes\r\n            } ,1000);\r\n        }else{\r\n            setTimeout(() => {\r\n                getRandomGif().then((img) => {\r\n                    console.log('RANDOM GIF: ', img)\r\n                    setState({\r\n                        data:img,\r\n                        loading: false\r\n                    });\r\n                });\r\n            },1000);\r\n            \r\n        }  \r\n    }, [category]);\r\n    \r\n\r\n    return state\r\n}","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const RandomButton = ({setCategories}) => {\r\n\r\n    const randomGif = () => {\r\n        const category = 'RANDOM GIF';\r\n        setCategories(categories => [category, ...categories]); //Importando \r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <button className='random-button' onClick={randomGif}>RANDOM GIF</button>\r\n        </>\r\n    )\r\n}\r\n\r\nRandomButton.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n  };","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\nimport { RandomButton } from \"./components/RandomButton\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Piece']);\r\n    return (\r\n        <>\r\n            <h1 className='title animate__animated animate__bounce'>GifExpertApp</h1>\r\n            <div className='input-plus-button'>\r\n                <AddCategory setCategories={setCategories}/> \r\n                <RandomButton setCategories={setCategories}/>\r\n            </div>\r\n            \r\n            <hr></hr>\r\n            <ol>\r\n                {\r\n                    categories.map((category, index) => (\r\n                        <GifGrid \r\n                            key={ category !== 'RANDOM GIF'? category : categories.length - index }\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}